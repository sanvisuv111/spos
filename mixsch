import java.util.Scanner;

public class CPUSchedulingAlgorithms {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\nCPU Scheduling Algorithms:");
            System.out.println("1. First-Come-First-Serve (FCFS)");
            System.out.println("2. Priority Scheduling");
            System.out.println("3. Shortest Remaining Time First (SRTF)");
            System.out.println("4. Round Robin");
            System.out.println("5. Exit");
            System.out.print("Choose an algorithm: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    fcfs(sc);
                    break;
                case 2:
                    priorityScheduling(sc);
                    break;
                case 3:
                    srtf(sc);
                    break;
                case 4:
                    roundRobin(sc);
                    break;
                case 5:
                    System.out.println("Exiting program...");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    // First-Come-First-Serve (FCFS) Scheduling
    public static void fcfs(Scanner sc) {
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n];
        int[] ar = new int[n];
        int[] bt = new int[n];
        int[] ct = new int[n];
        int[] ta = new int[n];
        int[] wt = new int[n];
        float avgwt = 0, avgta = 0;

        for (int i = 0; i < n; i++) {
            System.out.print("Enter process P" + (i + 1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.print("Enter process P" + (i + 1) + " burst time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
        }

        // Sort by arrival time
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (ar[j] > ar[j + 1]) {
                    int temp = ar[j]; ar[j] = ar[j + 1]; ar[j + 1] = temp;
                    temp = bt[j]; bt[j] = bt[j + 1]; bt[j + 1] = temp;
                    temp = pid[j]; pid[j] = pid[j + 1]; pid[j + 1] = temp;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (i == 0) ct[i] = ar[i] + bt[i];
            else ct[i] = (ar[i] > ct[i - 1]) ? ar[i] + bt[i] : ct[i - 1] + bt[i];
            ta[i] = ct[i] - ar[i];
            wt[i] = ta[i] - bt[i];
            avgwt += wt[i];
            avgta += ta[i];
        }

        System.out.println("\nPID\tArrival\tBurst\tComplete\tTurnaround\tWaiting");
        for (int i = 0; i < n; i++)
            System.out.println(pid[i] + "\t" + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t\t" + ta[i] + "\t\t" + wt[i]);

        System.out.println("\nAverage waiting time: " + (avgwt / n));
        System.out.println("Average turnaround time: " + (avgta / n));
    }

    // Priority Scheduling
    public static void priorityScheduling(Scanner sc) {
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();
        int[] p = new int[n], pp = new int[n], bt = new int[n], wt = new int[n], ta = new int[n];
        float awt = 0, ata = 0;

        for (int i = 0; i < n; i++) {
            System.out.print("Enter burst time of process " + (i + 1) + ": ");
            bt[i] = sc.nextInt();
            System.out.print("Enter the priority: ");
            pp[i] = sc.nextInt();
            p[i] = i + 1;
        }

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (pp[i] > pp[j]) {
                    int temp = pp[i]; pp[i] = pp[j]; pp[j] = temp;
                    temp = bt[i]; bt[i] = bt[j]; bt[j] = temp;
                    temp = p[i]; p[i] = p[j]; p[j] = temp;
                }
            }
        }

        wt[0] = 0;
        ta[0] = bt[0];
        awt += wt[0];
        ata += ta[0];

        for (int i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + bt[i - 1];
            ta[i] = wt[i] + bt[i];
            awt += wt[i];
            ata += ta[i];
        }

        System.out.println("\nProcess\tPriority\tBurst time\tWait time\tTurnaround time");
        for (int i = 0; i < n; i++)
            System.out.println(p[i] + "\t" + pp[i] + "\t\t" + bt[i] + "\t\t" + wt[i] + "\t\t" + ta[i]);

        System.out.println("\nAverage wait time: " + (awt / n));
        System.out.println("Average turnaround time: " + (ata / n));
    }

    // Shortest Remaining Time First (SRTF)
    public static void srtf(Scanner sc) {
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        int[] pid = new int[n], at = new int[n], bt = new int[n], ct = new int[n], wt = new int[n], tat = new int[n];
        int[] f = new int[n], k = new int[n];
        float avgwt = 0, avgtat = 0;
        int tot = 0, st = 0;

        for (int i = 0; i < n; i++) {
            System.out.print("Enter process " + (i + 1) + " arrival time: ");
            at[i] = sc.nextInt();
            System.out.print("Enter process " + (i + 1) + " burst time: ");
            bt[i] = sc.nextInt();
            k[i] = bt[i];
            f[i] = 0;
        }

        while (true) {
            int min = Integer.MAX_VALUE, c = n;
            if (tot == n) break;

            for (int i = 0; i < n; i++) {
                if (at[i] <= st && f[i] == 0 && bt[i] < min) {
                    min = bt[i];
                    c = i;
                }
            }

            if (c == n) st++;
            else {
                bt[c]--;
                st++;
                if (bt[c] == 0) {
                    ct[c] = st;
                    f[c] = 1;
                    tot++;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            tat[i] = ct[i] - at[i];
            wt[i] = tat[i] - k[i];
            avgwt += wt[i];
            avgtat += tat[i];
        }

        System.out.println("\nPID\tArrival\tBurst\tComplete\tTurnaround\tWaiting");
        for (int i = 0; i < n; i++)
            System.out.println(pid[i] + "\t" + at[i] + "\t" + k[i] + "\t" + ct[i] + "\t" + tat[i] + "\t" + wt[i]);

        System.out.println("\nAverage waiting time: " + (avgwt / n));
        System.out.println("Average turnaround time: " + (avgtat / n));
    }

    // Round Robin Scheduling
    public static void roundRobin(Scanner sc) {
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();
        int[] bt = new int[n], wt = new int[n], tat = new int[n], rem_bt = new int[n];
        int qt, sq = 0;
        float awt = 0, atat = 0;

        System.out.println("Enter the burst time of each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("Process " + (i + 1) + " = ");
            bt[i] = sc.nextInt();
            rem_bt[i] = bt[i];
        }

        System.out.print("Enter the quantum time: ");
        qt = sc.nextInt();

        while (true) {
            boolean done = true;
            for (int i = 0; i < n; i++) {
                if (rem_bt[i] > 0) {
                    done = false;
                    if (rem_bt[i] > qt) {
                        sq += qt;
                        rem_bt[i] -= qt;
                    } else {
                        sq += rem_bt[i];
                        wt[i] = sq - bt[i];
                        rem_bt[i] = 0;
                    }
                }
            }
            if (done) break;
        }

        for (int i = 0; i < n; i++) {
            tat[i] = bt[i] + wt[i];
            awt += wt[i];
            atat += tat[i];
        }

        System.out.println("\nProcess\tBurst time\tWaiting time\tTurnaround time");
        for (int i = 0; i < n; i++)
            System.out.println("P" + (i + 1) + "\t" + bt[i] + "\t\t" + wt[i] + "\t\t" + tat[i]);

        System.out.println("\nAverage waiting time: " + (awt / n));
        System.out.println("Average turnaround time: " + (atat / n));
    }
}
