import java.util.Scanner;

public class CPUSchedulingAlgorithms {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nCPU Scheduling Algorithms");
            System.out.println("1. First-Come, First-Serve (FCFS)");
            System.out.println("2. Priority Scheduling");
            System.out.println("3. Shortest Remaining Time First (SRTF)");
            System.out.println("4. Round Robin");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    fcfs();
                    break;
                case 2:
                    priorityScheduling();
                    break;
                case 3:
                    srtf();
                    break;
                case 4:
                    roundRobin();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please select again.");
            }
        } while (choice != 5);

        sc.close();
    }

    // FCFS Scheduling
    public static void fcfs() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();
        
        int pid[] = new int[n]; // process IDs
        int ar[] = new int[n];  // arrival times
        int bt[] = new int[n];  // burst times
        int ct[] = new int[n];  // completion times
        int ta[] = new int[n];  // turnaround times
        int wt[] = new int[n];  // waiting times
        int temp;
        float avgwt = 0, avgta = 0;
        
        for (int i = 0; i < n; i++) {
            System.out.print("Enter process P" + (i + 1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.print("Enter process P" + (i + 1) + " burst time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - (i + 1); j++) {
                if (ar[j] > ar[j + 1]) {
                    temp = ar[j];
                    ar[j] = ar[j + 1];
                    ar[j + 1] = temp;

                    temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;

                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ct[i] = ar[i] + bt[i];
            } else {
                if (ar[i] > ct[i - 1]) {
                    ct[i] = ar[i] + bt[i];
                } else {
                    ct[i] = ct[i - 1] + bt[i];
                }
            }
            ta[i] = ct[i] - ar[i];
            wt[i] = ta[i] - bt[i];
            avgwt += wt[i];
            avgta += ta[i];
        }

        System.out.println("\nPID\tArrival\tBurst\tComplete\tTurnaround\tWaiting");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t\t" + ta[i] + "\t\t" + wt[i]);
        }
        
        System.out.println("\nAverage waiting time: " + (avgwt / n));
        System.out.println("Average turnaround time: " + (avgta / n));
    }

    // Priority Scheduling
    public static void priorityScheduling() {
        Scanner sc = new Scanner(System.in);
        int n, awt = 0, ata = 0;
        int[] p, pp, wt, ta, bt;

        p = new int[10];
        pp = new int[10];
        bt = new int[10];
        wt = new int[10];
        ta = new int[10];

        System.out.print("Enter the number of processes: ");
        n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            System.out.print("Enter burst time of process " + (i + 1) + ": ");
            bt[i] = sc.nextInt();
            System.out.print("Enter the priority: ");
            pp[i] = sc.nextInt();
            p[i] = i + 1;
        }

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (pp[i] > pp[j]) {
                    int temp = pp[i];
                    pp[i] = pp[j];
                    pp[j] = temp;

                    temp = bt[i];
                    bt[i] = bt[j];
                    bt[j] = temp;

                    temp = p[i];
                    p[i] = p[j];
                    p[j] = temp;
                }
            }
        }

        wt[0] = 0;
        ta[0] = bt[0];
        awt += wt[0];
        ata += ta[0];

        for (int i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + bt[i - 1];
            ta[i] = wt[i] + bt[i];
            awt += wt[i];
            ata += ta[i];
        }

        System.out.println("\nProcess  Priority  Burst time  Wait time  Turnaround time");
        for (int i = 0; i < n; i++) {
            System.out.println("   " + p[i] + "\t    " + pp[i] + "\t      " + bt[i] + "\t      " + wt[i] + "\t          " + ta[i]);
        }

        System.out.println("\nAverage wait time is: " + (float) awt / n);
        System.out.println("Average turnaround time is: " + (float) ata / n);
    }

    // SRTF Scheduling
    public static void srtf() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of processes:");
        int n = sc.nextInt();

        int pid[] = new int[n];
        int at[] = new int[n];
        int bt[] = new int[n];
        int ct[] = new int[n];
        int wt[] = new int[n];
        int tat[] = new int[n];
        int f[] = new int[n];
        int k[] = new int[n];
        int i = 0, st = 0, tot = 0;
        float avgwt = 0, avgtat = 0;

        for (i = 0; i < n; i++) {
            pid[i] = i + 1;
            System.out.println("Enter process " + (i + 1) + " arrival time:");
            at[i] = sc.nextInt();
            System.out.println("Enter process " + (i + 1) + " burst time:");
            bt[i] = sc.nextInt();
            k[i] = bt[i];
            f[i] = 0;
        }

        while (true) {
            int min = Integer.MAX_VALUE;
            int c = n;
            if (tot == n) break;

            for (i = 0; i < n; i++) {
                if ((at[i] <= st) && (f[i] == 0) && (bt[i] < min)) {
                    min = bt[i];
                    c = i;
                }
            }

            if (c == n) {
                st++;
            } else {
                bt[c]--;
                st++;

                if (bt[c] == 0) {
                    ct[c] = st;
                    f[c] = 1;
                    tot++;
                }
            }
        }

        for (i = 0; i < n; i++) {
            tat[i] = ct[i] - at[i];
            wt[i] = tat[i] - k[i];
            avgwt += wt[i];
            avgtat += tat[i];
        }

        System.out.println("\nPID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time");
        for (i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + at[i] + "\t\t" + k[i] + "\t\t" + ct[i] + "\t\t" + tat[i] + "\t\t" + wt[i]);
        }

        System.out.println("\nAverage waiting time: " + (avgwt / n));
        System.out.println("Average turnaround time: " + (avgtat / n));
    }

    // Round Robin Scheduling
    public static void roundRobin() {
        Scanner s = new Scanner(System.in);
        System.out.print("Enter the number of processes: ");
        int n = s.nextInt();
        System.out.print("Enter the burst time of the processes: ");
        int burstTime[] = new int[n];
        for (int i = 0; i < n; i++) {
            burstTime[i] = s.nextInt();
        }
        System.out.print("Enter the time quantum: ");
        int q = s.nextInt();

        int waitingTime[] = new int[n];
        int turnaroundTime[] = new int[n];
        int temp[] = new int[n];
        int total = 0;

        for (int i = 0; i < n; i++) {
            temp[i] = burstTime[i];
        }

        boolean done;
        int time = 0;
        do {
            done = true;
            for (int i = 0; i < n; i++) {
                if (temp[i] > 0) {
                    done = false;
                    if (temp[i] > q) {
                        time += q;
                        temp[i] -= q;
                    } else {
                        time += temp[i];
                        waitingTime[i] = time - burstTime[i];
                        temp[i] = 0;
                    }
                }
            }
        } while (!done);

        for (int i = 0; i < n; i++) {
            turnaroundTime[i] = burstTime[i] + waitingTime[i];
            total += waitingTime[i];
        }

        float avgWaitingTime = (float) total / n;
        float avgTurnaroundTime = (float) (total + time) / n;

        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + burstTime[i] + "\t\t" + waitingTime[i] + "\t\t" + turnaroundTime[i]);
        }

        System.out.println("\nAverage Waiting Time: " + avgWaitingTime);
        System.out.println("Average Turnaround Time: " + avgTurnaroundTime);
    }
}
